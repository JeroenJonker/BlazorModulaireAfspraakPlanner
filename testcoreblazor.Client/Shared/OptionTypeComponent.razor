@using BlazorAgenda.Shared.Enums;
@using BlazorAgenda.Shared.Models;
@using BlazorAgenda.Shared.Interfaces;
@using BlazorAgenda.Shared.Interfaces.BaseObjects;
@using BlazorAgenda.Services.Interfaces;
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@switch ((ElementTypes)Option.ElementType)
{
    case ElementTypes.Text:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="text" bind="@EventOption.Value" required />
        }
        else
        {
            <input class="form-control" type="text" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.Check:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="checkbox" onchange="@OnCheckboxChanged" required />
        }
        else
        {
            <input class="form-control" type="checkbox" onchange="@OnCheckboxChanged" />
        }
        break;
    case ElementTypes.Number:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="number" step="1" bind="@EventOption.Value" required />
        }
        else
        {
            <input class="form-control" type="number" step="1" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.Telephonenumber:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="tel" pattern="[0-9]{8}" bind="@EventOption.Value" required />
        }
        else
        {
            <input class="form-control" type="tel" pattern="[0-9]{8}" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.Address:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="text" pattern="^\d{4}\D{2}$" bind="@EventOption.Value" required />
        }
        else
        {
            <input class="form-control" type="text" pattern="^\d{4}\D{2}$" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.Date:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="date" bind="@EventOption.Value" required />
        }
        else
        {
            <input class="form-control" type="date" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.Email:
        if (Option.IsMandatory)
        {
            <input class="form-control" type="email" bind="@EventOption.Value" />
        }
        else
        {
            <input class="form-control" type="email" bind="@EventOption.Value" />
        }
        break;

    case ElementTypes.Textarea:
        if (Option.IsMandatory)
        {
            <textarea class="form-control" bind="@EventOption.Value" />
        }
        else
        {
            <textarea class="form-control" bind="@EventOption.Value" />
        }
        break;
    case ElementTypes.StaffSelection:
        if (Option.IsMandatory)
        {
            <select bind="@EventOption.Value" required>
                <option value="" selected disabled hidden>-- Choose a staffmember --</option>
                @foreach (User dropdownItem in StaffMembers)
                {
                    <option value="@dropdownItem.Emailadress">@dropdownItem.Firstname @dropdownItem.Lastname</option>
                }
            </select>
        }
        else
        {
            <select bind="@EventOption.Value">
                <option value="" selected>-- Choose a staffmember --</option>
                @foreach (User dropdownItem in StaffMembers)
                {
                    <option value="@dropdownItem.Emailadress">@dropdownItem.Firstname @dropdownItem.Lastname</option>
                }
            </select>
        }

        break;
    case ElementTypes.Dropdown:
        if (Option.IsMandatory)
        {
            <select onchange="@OnDropdownChange" required>
                @if (EventOption.Value == null)
                {
                    <option value="" selected disabled hidden>-- Choose an option --</option>
                }
                @foreach (Option dropdownItem in Option.InverseOptionNavigation)
                {
                    if (EventOption.Value == dropdownItem.Text)
                    {
                        <option value="@dropdownItem.Text" selected>@dropdownItem.Text</option>
                    }
                    else
                    {
                        <option value="@dropdownItem.Text">@dropdownItem.Text</option>
                    }
                }
            </select>
        }
        else
        {
        <select onchange="@OnDropdownChange">
            @if (EventOption.Value == null)
            {
                <option value="" selected>-- Choose an option --</option>
            }
            @foreach (Option dropdownItem in Option.InverseOptionNavigation)
            {
                Console.WriteLine(EventOption.Value + " " + dropdownItem.Text);
                if (EventOption.Value == dropdownItem.Text)
                {
                    <option value="@dropdownItem.Text" selected>@dropdownItem.Text</option>
                    Console.WriteLine("ok");
                }
                else
                {
                    <option value="@dropdownItem.Text">@dropdownItem.Text</option>
                    Console.WriteLine("nope");
                }
            }
        </select>
        }

        break;
    case ElementTypes.MultiSelect:
        @*if (Option.IsMandatory)
        {
            <select class="select-multiple-option-type-component" onchange="@OnMultiSelectChange" onchange="selectChange(this)" ref="@multiSelect" multiple="multiple" required>
                @foreach (Option dropdownItem in Option.InverseOptionNavigation)
                {
                    <option value="@dropdownItem.Text">@dropdownItem.Text</option>
                }
            </select>
        }
        else
        {
            <select class="select-multiple-option-type-component" onchange="@OnMultiSelectChange" onchange="selectChange(this)" ref="@multiSelect" multiple="multiple" required>
                @foreach (Option dropdownItem in Option.InverseOptionNavigation)
                {
                    <option value="@dropdownItem.Text">@dropdownItem.Text</option>
                }
            </select>
        }*@

        break;
    @*case ElementTypes.Radiobutton:
        <input class="form-control" type="checkbox" bind="@EventOption.Value" />
        break;*@
}

@functions
{
    [Parameter] protected IOption Option { get; set; }

    [Parameter][Inject] protected IEventOption EventOption { get; set; }

    [Inject] protected IUserService UserService { get; set; }
    [Inject] protected IOptionService OptionService { get; set; }
    [Inject] protected IStateService StateService { get; set; }
    [Parameter] public List<User> StaffMembers { get; set; }
    [Parameter] Action<IEventOption> OnNewEventOption { get; set; }

    ElementRef multiSelect;


    protected override void OnParametersSet()
    {
        EventOption.Option = Option as Option;
        if (EventOption.Value == null)
        {
            OnNewEventOption?.Invoke(EventOption);
        }
        if ((ElementTypes)Option.ElementType == ElementTypes.Check && EventOption.Value == string.Empty)
        {
            EventOption.Value = "False";
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        if (StaffMembers == null && (ElementTypes)Option.ElementType == ElementTypes.StaffSelection)
        {
            StaffMembers = new List<User>();
            StaffMembers = await UserService.GetStaffByOrganization(StateService.Organization);
        }
    }

    public void OnCheckboxChanged(UIChangeEventArgs e)
    {
        EventOption.Value = e.Value.ToString();
    }

    public void OnDropdownChange(UIChangeEventArgs e)
    {
        EventOption.Value = e.Value.ToString();
        EventOption.Option = Option.InverseOptionNavigation.FirstOrDefault(suboption => suboption.Text == e.Value.ToString());
    }

    public async void OnMultiSelectChange(UIChangeEventArgs e)
    {
        List<string> selectedList = await JSRuntime.InvokeAsync<List<string>>(
        "JsFunctions.getSelectedList", multiSelect);
        
        if (selectedList.Count != 0) {
            foreach (string option in selectedList)
            {
                Console.WriteLine(option);
            }
        }
        //EventOption.Value = e.Value.ToString();
        //EventOption.Option = Option.InverseOptionNavigation.FirstOrDefault(suboption => suboption.Text == e.Value.ToString());
    }
}
